//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Article.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet Article
// Créé le       : 19/02/2015
// Modifié le    : 23/07/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Net;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Newtonsoft.Json.Linq;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "ZDNet.Service"
//*******************************************************************************************************************************
namespace ZDNet.Service
	{
	
    //   ###   ####   #####  #   ###   #      #####
    //  #   #  #   #    #    #  #   #  #      #    
    //  #####  ####     #    #  #      #      ###  
    //  #   #  #   #    #    #  #   #  #      #    
    //  #   #  #   #    #    #   ###   #####  #####

	//***************************************************************************************************************************
	// Classe Article
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit un article.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	[DataContract]
	public class Article
		{
		//***********************************************************************************************************************
		#region // Procédure Value => IDictionary
		//-----------------------------------------------------------------------------------------------------------------------
		private static string Value ( IDictionary<string, string> Self, string Name, string Default )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return ( Self.ContainsKey ( Name ) ) ? Self[Name] : Default;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Procédure Value => JToken
		//-----------------------------------------------------------------------------------------------------------------------
		private static T Value<T> ( JToken Token, string Name, T Default )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				JValue Value = Token.Value<JValue> ( Name );

				return ( Value != null && Value.Value != null && Value.Value is T ) ? (T)Value.Value : Default;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Default;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Article ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID   = string.Empty;
			this.Author      = string.Empty;
			this.Content     = string.Empty;
			this.Icon        = string.Empty;
			this.IsMarked    = false;
			this.PublishDate = DateTime.MinValue;
			this.Title       = string.Empty;
			this.Uri         = string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private Article ( string Value ) : this () { this.Load ( Value ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private Article ( JToken Value ) : this () { this.Load ( Value ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private Article ( IDictionary<string, string> Value ) : this () { this.Load ( Value ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void CopyFrom ( Article Value )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID   = Value.ArticleID;
			this.Author      = Value.Author;
			this.Content     = Value.Content;
			this.Icon        = Value.Icon;
			this.PublishDate = Value.PublishDate;
			this.Title       = Value.Title;
			this.Uri         = Value.Uri;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Load ( string Value ) { this.Load ( Value.QueryString () ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le noeud JSON.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Load ( JToken Token )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.PublishDate = Token.Read<DateTime>( "pubDate" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID = Value<string>( Token, "guid"           , this.ArticleID );
			this.Author    = Value<string>( Token, "media:credit"   , this.Author    );
			this.Icon      = Value<string>( Token, "media:thumbnail", this.Icon      );
			this.Title     = Value<string>( Token, "title"          , this.Title     );
			this.Uri       = Value<string>( Token, "link"           , this.Uri       );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			this.Author = HttpUtility.HtmlDecode ( this.Author );
			this.Title  = HttpUtility.HtmlDecode ( this.Title  );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le tableau.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Load ( IDictionary<string, string> QueryString )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID = Value ( QueryString, "ArticleID", this.ArticleID );
			this.Author    = Value ( QueryString, "Author"   , this.Author    );
			this.Icon      = Value ( QueryString, "Icon"     , this.Icon      );
			this.Title     = Value ( QueryString, "Title"    , this.Title     );
			this.Uri       = Value ( QueryString, "Uri"      , this.Uri       );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Date ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( QueryString.ContainsKey ( "PublishDate" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				DateTime PublishDate = DateTime.MinValue;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( QueryString["PublishDate"].Length == 12 )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( DateTime.TryParseExact ( QueryString["PublishDate"], "yyyyMMddHHmm", 
					                                 null, DateTimeStyles.None, out PublishDate ) )
						this.PublishDate = PublishDate;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( QueryString["PublishDate"].Length == 14 )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( DateTime.TryParseExact ( QueryString["PublishDate"], "yyyyMMddHHmmss", 
					                                 null, DateTimeStyles.None, out PublishDate ) )
						this.PublishDate = PublishDate.AddSeconds ( - PublishDate.Second );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le tableau.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string UrlEncode ( params string[] Names )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			NameValueCollection Result = new NameValueCollection ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			foreach ( string Name in Names )
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( Name )
					{
					//-----------------------------------------------------------------------------------------------------------
					case "ArticleID"   : Result["ArticleID"] = this.ArticleID; break;
					case "Author"      : Result["Author"   ] = this.Author;    break;
					case "Icon"        : Result["Icon"     ] = this.Icon;      break;
					case "Title"       : Result["Title"    ] = this.Title;     break;
					case "Uri"         : Result["Uri"      ] = this.Uri;       break;
					//-----------------------------------------------------------------------------------------------------------
					case "PublishDate" :
						{
						//-------------------------------------------------------------------------------------------------------
						Result["PublishDate"] = this.PublishDate.ToString ( "yyyyMMddHHmmss" );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Result.ToString ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Parse ( string Value ) { return new Article ( Value ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Parse ( JToken Value ) { return new Article ( Value ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le tableau.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Parse ( IDictionary<string, string> Value )
			 { return new Article ( Value ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		[DataMember]public string   ArticleID   { get; set; }
		[DataMember]public string   Author      { get; set; }
		[DataMember]public string   Content     { get; set; }
		[DataMember]public string   Icon        { get; set; }
		[DataMember]public DateTime PublishDate { get; set; }
		[DataMember]public string   Title       { get; set; }
		[DataMember]public string   Uri         { get; set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens un objet Article non initialisé.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Empty { get { return new Article (); } }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'objet courant est initialisé ou pas.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsEmpty { get { return string.IsNullOrEmpty ( this.ArticleID ); } }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'atticle a été marqué.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsMarked { get; set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'atticle dispose juste d'un lien.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsSingleLink
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				return   string.IsNullOrEmpty ( this.ArticleID ) && 
				       ! string.IsNullOrEmpty ( this.Uri       );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "ZDNet.Service"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
