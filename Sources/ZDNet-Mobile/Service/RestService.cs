//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : RestService.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet RestService
// Créé le       : 27/02/2015
// Modifié le    : 15/06/2018
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Web;
using System.Text;
using System.Windows;
using System.Threading;
using System.Globalization;
using System.ComponentModel;
using System.IO.IsolatedStorage;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
using System.Security.Cryptography;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Net.NetworkInformation;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using ZDNet.Service.Resources;
using Microsoft.Phone.Tasks;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "ZDNet.Service"
//*******************************************************************************************************************************
namespace ZDNet.Service
	{

    //  ####   #####   ####  #####          ###   #      #  #####  #   #  #####
    //  #   #  #      #        #           #   #  #      #  #      ##  #    #  
    //  ####   ###     ###     #    #####  #      #      #  ###    # # #    #  
    //  #   #  #          #    #           #   #  #      #  #      #  ##    #  
    //  #   #  #####  ####     #            ###   #####  #  #####  #   #    #  
	
	//***************************************************************************************************************************
	// Classe RestService
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet l'appel aux procédures du Service-Web.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public static class RestService
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private const string UserAgent = "ZDNet France/3.2 CFNetwork/609.1.4 Darwin/13.0.0";
		private const string BaseUri   = "https://www.ZDNet.fr/globalapp/";
		private const string AppTitle  = "Business et Technologies - ZDNet.fr";
		//-----------------------------------------------------------------------------------------------------------------------
		private static List<string> ViewedArticles = null;
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		// Prototype   : public RestService ()
		// Description : Constructeur de la classe
		//***********************************************************************************************************************
		static RestService ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			ViewedArticles = StorageSettings.GetValue ( "articles" ) as List<string>;

			if ( ViewedArticles == null ) ViewedArticles = new List<string> ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de l'Article.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ArticleToFile ( Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "ARTICLE-" + Article.ArticleID + ".HTML";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Extrait une méta-data.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ExtractMeta ( string Content, string Name )
			{
			//-------------------------------------------------------------------------------------------------------------------
			int MetaIndex = Content.IndexOf ( "<meta name=\"" + Name + "\"" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( MetaIndex > -1 )
				{
				//---------------------------------------------------------------------------------------------------------------
				int ContentIndex = Content.IndexOf ( "content=\"", MetaIndex );

				if ( ContentIndex > -1 )
					{
					int SIndex = ContentIndex + 9;
					int EIndex = Content.IndexOf ( "\"", SIndex );

					return Content.Substring ( SIndex, EIndex - SIndex );
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Extrait un attribut.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ExtractAttribute ( string Attribute, string Value )
			{
			//-------------------------------------------------------------------------------------------------------------------
			int Index = Value.IndexOf ( Attribute + "=\"" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Index > -1 )
				{
				//---------------------------------------------------------------------------------------------------------------
				Index += Attribute.Length + 2;
				
				int EofIndex = Value.IndexOf ( "\"", Index );

				if ( EofIndex > -1 ) return Value.Substring ( Index, EofIndex - Index );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Document">Document à corriger.</param>
		/// <param name="LinkHtml">Masque pour les liens.</param>
		/// <param name="ImagHtml">Masque pour les images.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string FixContent ( string Document, string LinkHtml, string ImagHtml )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			StringBuilder Content = new StringBuilder ( Document );

			for ( int Index = 0 ; Index < Content.Length ; Index ++ )
				{
				//---------------------------------------------------------------------------------------------------------------
				char Car = Content[Index];
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Car == '<' )
					{
					//-----------------------------------------------------------------------------------------------------------
					// '<a '
					//-----------------------------------------------------------------------------------------------------------
					if ( Content[Index + 1] == 'a' && Content[Index + 2] == ' ' )
						{
						int EndTag = Content.IndexOf ( ">", Index );

						if ( EndTag != -1 )
							{
							string Value = Content.ToString ( Index, EndTag - Index + 2 );

							int PosSId = Value.IndexOf ( "id=" );

							if ( PosSId != -1 )
								{
								var QueryString = new NameValueCollection ();

								QueryString["ArticleID"] = ExtractAttribute ( "id"  , Value );
								QueryString["Uri"      ] = ExtractAttribute ( "href", Value );

								string NewContent = string.Format ( LinkHtml, QueryString.ToString () );

								Content.Remove ( Index, Value.Length );
								Content.Insert ( Index, NewContent   );

								Index += NewContent.Length;
								}
							}
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// '<img '
					//-----------------------------------------------------------------------------------------------------------
					else if ( Content[Index + 1] == 'i' && Content[Index + 2] == 'm' )
						{
						int EndTag = Content.IndexOf ( ">", Index );

						if ( EndTag != -1 )
							{
							string Value = Content.ToString ( Index, EndTag - Index + 2 );

							int PosSrc = Value.IndexOf ( "src=" );

							if ( PosSrc != -1 )
								{
								int PosEnd = Value.IndexOf ( "\"", PosSrc + 5 );

								if ( PosEnd > PosSrc )
									{
									string Source  = Value  .Substring ( PosSrc + 5, PosEnd - 
									                                                  PosSrc - 5 );
									string Details = Content.ToString  ( Index  + 5, EndTag - 
									                                                  Index  - 4 );
									if ( Details.EndsWith ( "/" ) )
										Details = Details.Substring ( 0, Details.Length - 1 );

									string NewContent = string.Empty;
									
									int StWidth = Details.IndexOf ( "width" );

									if ( StWidth != -1 )
										{
										int EnWidth = Details.IndexOf ( "\"", StWidth + 7 );

										if ( EnWidth != -1 )
											{
											string sWidth = Details.Substring ( StWidth + 7, EnWidth - StWidth - 7 );

											if ( sWidth.Length > 0 )
												{
												int Width = sWidth.ToInteger ();

												if ( Width > 0 && Width < 150 )
													{
													NewContent = string.Format ( ImagHtml, Details, Source );
													}
												}
											else if ( Details.IndexOf ( "align=\"left\"" ) != -1 )
												{
												Details += " style=\"margin: 5px\"";
												
												NewContent = string.Format ( ImagHtml, Details, Source );
												}
											}
										}

									if ( string.IsNullOrEmpty ( NewContent ) )
										NewContent = string.Format ( "<br>" + ImagHtml + "<br>", 
										                        "src=\"" + Source + "\"", Source );

									Content.Remove ( Index, Value.Length );
									Content.Insert ( Index, NewContent   );

									Index += 10;
									}
								}
							}
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Document = Content.ToString ();
			
			return Document;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Content">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string InsertSheets ( string Content )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return InsertSheets ( Content, false );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Content">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string InsertSheets ( string Content, bool HideViewedArticles )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( Content ) ) return string.Empty;

			int StylePosition = Content.IndexOf ( "[STYLE]" );
			int StyleSize     = 7;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( StylePosition > 0 && Content.Length > StylePosition + StyleSize )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Content.Substring ( StylePosition, StyleSize ).Equals ( "[STYLE]" ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					string StyleSheetsContent = StyleSheets.Content;
					
					if ( HideViewedArticles ) StyleSheetsContent += ViewedArticlesToStyle ();

					return string.Format ( "{0}{1}{2}", Content.Substring ( 0, StylePosition ),
					         StyleSheetsContent, Content.Substring ( StylePosition + StyleSize ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identification unique de la page source.
		/// </summary>
		/// <param name="Source">Uri de la page.</param>
		/// <returns>identifiant unique.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string PatternToFile ( string Pattern )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "SEARCH-" + Md5Encryptor.GetString ( Pattern ).ToUpper () + ".HTM";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identification unique de la page source.
		/// </summary>
		/// <param name="Source">Uri de la page.</param>
		/// <returns>identifiant unique.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string PatternToPart ( string Pattern )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "SEARCH-" + Md5Encryptor.GetString ( Pattern ).ToUpper () + ".PART";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Identifie un article comme lu.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void RegisterArticle ( Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! ViewedArticles.Contains ( Article.ArticleID ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				ViewedArticles.Add ( Article.ArticleID );

				while ( ViewedArticles.Count > 50 ) ViewedArticles.RemoveAt ( 0 );

				StorageSettings.SetValue ( "articles", ViewedArticles );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le style permettant le marquage des articles déjà lus.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ViewedArticlesToStyle ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			string Result = string.Empty;

			foreach ( string ViewedArticle in ViewedArticles )
				{ Result += ( ( string.IsNullOrEmpty ( Result ) ) ? "" : "," ) + ( "#A_" + ViewedArticle ); }
			if ( ! string.IsNullOrEmpty ( Result ) )
				return string.Format ( SR.GetResource ( "GetArticlesList", "Cont.css" ), Result );

			return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion du 'GET'
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Délégate utilisé pour avertir de la réception des données
		//-----------------------------------------------------------------------------------------------------------------------
		private delegate void DownloadBitsCallback ( DownloadBitsState Args );
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Classe DownloadBitsState
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Permet le traitement d'une demande GET
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private class DownloadBitsState
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			private object           AssociateObject;
			private AppCacheFile     CacheFile;
			private RestEventHandler OnComplete;
			private AsyncOperation   AsyncOperation;
			//-------------------------------------------------------------------------------------------------------------------

			//*******************************************************************************************************************
			/// <summary>
			/// Initialise une nouvelle instance de l'objet <b>DownloadBitsState</b>.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsState ( object               AssociateObject, 
			                           AppCacheFile         CacheFile      , 
			                           object               UserToken      , 
									   RestEventHandler     OnComplete     , 
									   DownloadBitsCallback Callback       )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AssociateObject = AssociateObject;
				this.CacheFile       = CacheFile;
				this.OnComplete      = OnComplete;
				this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.Callback       = Callback;
				this.Cookies        = new NameValueCollection ();
				this.Document       = null;
				this.Exception      = null;
				this.Stream         = null;
				this.StreamBuffer   = string.Empty;
				this.Request        = null;
				this.Response       = null;
				this.UserToken      = UserToken;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens la page web correspondante à l'anomalie.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			private string GetErrorContent ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				string Content = SR.GetResource ( "Global", "404.html" );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				switch ( Error )
					{
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.EmptyResponse      : Content = 
						 string.Format ( Content, "EMPTY_RESPONSE"      , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InvalideFormat     : Content = 
						 string.Format ( Content, "INVALIDE_FORMAT"     , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.PartialContent     : Content = 
						 string.Format ( Content, "PARTIAL_CONTENT"     , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Forbidden          : Content = 
						 string.Format ( Content, "FORBIDDEN"           , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.NotFound           : Content = 
						 string.Format ( Content, "NOT_FOUND"           , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Timeout            : Content = 
						 string.Format ( Content, "TIMEOUT"             , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Unauthorized       : Content = 
						 string.Format ( Content, "UNAUTHORIZED_ACCESS" , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InternalException  : Content = 
						 string.Format ( Content, "INTERNAL_EXCEPTION"  , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ProxyAccessRequest : Content = 
						 string.Format ( Content, "PROXY_ACCESS_REQUEST", "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ServiceUnavailable : Content = 
						 string.Format ( Content, "SERVICE_UNAVAILABLE" , "none", "block" ); break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return InsertSheets ( Content );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( Uri ProxyAccessRequestUri )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.PostAnomaly ( RestRequestResult.ProxyAccessRequest );

				try
					{
					//-----------------------------------------------------------------------------------------------------------
					Instance.RootFrame.Dispatcher.BeginInvoke ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						try
							{
							//---------------------------------------------------------------------------------------------------
							(new WebBrowserTask () { Uri = ProxyAccessRequestUri }).Show ();
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						catch {}
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.OnComplete != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( this.CacheFile != null && ! this.CacheFile.IsEmpty )
							{
							//---------------------------------------------------------------------------------------------------
							string Content = InsertSheets ( CacheFile.Content, true );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							string Content = this.GetErrorContent ( Error );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error, string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.OnComplete != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! string.IsNullOrEmpty ( Content ) )
							{
							//---------------------------------------------------------------------------------------------------
							Content = InsertSheets ( Content, true );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							Content = this.GetErrorContent ( Error );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostCallback ( SendOrPostCallback Callback )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );

					Callback ( null );
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostOperationComplete ( string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				if ( this.OnComplete != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
						{
						//-------------------------------------------------------------------------------------------------------
						var E = new RestEventArgs ( this.AssociateObject, Content );

						this.OnComplete ( this.UserToken, E );
						//-------------------------------------------------------------------------------------------------------
						}, null );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsCallback Callback { get; private set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public NameValueCollection Cookies { get; set; }
			//*******************************************************************************************************************
		
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public JToken Document { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public Exception Exception { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public Stream Stream { get; set; }
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public string StreamBuffer { get; set; }
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebRequest Request { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebResponse Response { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public object UserToken { get; private set; }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Lance une requête de type GET
		/// </summary>
		/// <param name="Path">Chemin de la page à charger.</param>
		/// <param name="OnComplete">Est appelé à la fin du traitement.</param>
		/// <param name="Callback">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void DownloadBits ( object               AssociateObject,
		                                   string               Path           ,  
										   int                  TimeOut        ,
										   AppCacheFile         CacheFile      ,
		                                   object               UserToken      , 
		                                   RestEventHandler     OnComplete     , 
										   DownloadBitsCallback Callback       )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			RestWebRequest Request = RestWebRequest.Create ();

			Request.UseCompression = RestService.UseCompression;

			Request.TimeOut = TimeOut;

			Request.Headers["User-Agent"] = UserAgent;

			Path = BaseUri + Path;

			var AsyncState = new DownloadBitsState ( AssociateObject, CacheFile, UserToken, OnComplete, Callback );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Async ( ( Sender, Args ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				DownloadBitsState State = Args.UserToken as DownloadBitsState;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Stream    = Args.Stream;
					State.Request   = Args.Request;
					State.Response  = Args.Response;
					State.Exception = Args.Exception;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Args.Stream != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Stream.CanRead )
							{
							//---------------------------------------------------------------------------------------------------
							State.Cookies = new NameValueCollection ( Request.Cookies );
							
							using ( StreamReader Tr = new StreamReader ( Args.Stream ) )
								{
								State.StreamBuffer = Tr.ReadToEnd ();

								State.Document = JToken.Parse ( State.StreamBuffer );
								}

							State.Callback ( State );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.Exception != null )
						{
						//-------------------------------------------------------------------------------------------------------
						RestRequestResult Result = RestRequestResult.ServiceUnavailable;
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Exception is WebException )
							{
							//---------------------------------------------------------------------------------------------------
							WebException Exception = Args.Exception as WebException;
							//---------------------------------------------------------------------------------------------------
					
							//---------------------------------------------------------------------------------------------------
							if ( Exception.Response is HttpWebResponse )
								{
								//-----------------------------------------------------------------------------------------------
								HttpWebResponse Response = Exception.Response as HttpWebResponse;

								if ( Response.StatusCode == HttpStatusCode.Unauthorized )
									{
									Result = RestRequestResult.Unauthorized;
									}
								else if ( Response.StatusCode == HttpStatusCode.Forbidden )
									{
									Result = RestRequestResult.Forbidden;
									}
								else if ( Response.StatusCode == HttpStatusCode.NotFound )
									{
									Result = RestRequestResult.NotFound;
									}
								else if ( Response.StatusCode == HttpStatusCode.RequestTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								else if ( Response.StatusCode == HttpStatusCode.GatewayTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ReceiveFailure )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.EmptyResponse;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ProtocolError )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.NotFound;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( ! string.IsNullOrEmpty ( Exception.Message ) )
								{
								//-----------------------------------------------------------------------------------------------
								if ( Exception.Message.IndexOf ( "NotFound" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.NotFound;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								else if ( Exception.Message.IndexOf ( "Timeout" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.Timeout;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						State.PostAnomaly ( Result );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! Args.IsRedirected )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Cancelled )
							State.PostAnomaly ( RestRequestResult.Timeout            );
						else
							State.PostAnomaly ( RestRequestResult.ServiceUnavailable );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.IsRedirected && Args.ResponseUri != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! Args.ResponseUri.OriginalString.StartsWith ( BaseUri ) )
							State.PostAnomaly ( Args.ResponseUri );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( JsonReaderException Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						// Le contenue est vide
						//-------------------------------------------------------------------------------------------------------
						if ( string.IsNullOrEmpty ( State.StreamBuffer ) )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// La taille de la réponse est de 0
						//-------------------------------------------------------------------------------------------------------
						else if ( Args.Response               == null )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						else if ( Args.Response.ContentLength <=    0 )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// La réponse est vide
						//-------------------------------------------------------------------------------------------------------
						else if ( State.StreamBuffer[0] == '\0' )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// On a été redirigé de force
						//-------------------------------------------------------------------------------------------------------
						else if ( Args.ResponseUri != null )
							{
							//---------------------------------------------------------------------------------------------------
							if ( ! Args.ResponseUri.OriginalString.StartsWith ( BaseUri ) )
								State.PostAnomaly ( Args.ResponseUri );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( Exception Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;

					State.PostAnomaly ( RestRequestResult.InternalException );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}, new Uri ( Path ), AsyncState );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetArticle
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetArticle</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static AppCacheFile ParseGetArticle ( Article Article, AppWebCache Cache, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( State == null || State.Document == null || ! State.Document.HasValues )
				return AppCacheFile.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			var Item = State.Document["result"];
			
			if ( Item == null || ! Item.HasValues ) return AppCacheFile.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Pages = Item["pages"];

			if ( Pages == null || ! Pages.HasValues ) return AppCacheFile.Empty;

			Article.Load ( Item );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string A_PageHtml = SR.GetResource ( "GetArticle", "Page.html" );
			string A_ItemHtml = SR.GetResource ( "GetArticle", "Item.html" );
			string A_LinkHtml = SR.GetResource ( "GetArticle", "Link.html" );
			string A_ImagHtml = SR.GetResource ( "GetArticle", "Imag.html" );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Content = string.Empty;

			string Title  = Surrogate.Encode ( Article.Title  );
			string Author = Surrogate.Encode ( Article.Author );

			string LongArticleUri  = Article.UrlEncode ( "ArticleID"  , "Icon"       , 
                                                         "PublishDate", "Title"      , 
														 "Uri"                       );
			string ShortArticleUri = Article.UrlEncode ( "ArticleID"  , "PublishDate",
				                                         "Uri"                       );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string SubTitle = string.Empty;

			TimeSpan Delay = DateTime.Now.Subtract ( Article.PublishDate );

			if      ( Delay.TotalHours < 1 && Delay.Minutes == 1 )
				SubTitle = string.Format ( "il y a {0} minute" , (int)Delay.Minutes    );
			else if ( Delay.TotalHours < 1                       )
				SubTitle = string.Format ( "il y a {0} minutes", (int)Delay.Minutes    );
			else if ( Delay.TotalHours == 1                      )
				SubTitle = string.Format ( "il y a {0} heure"  , (int)Delay.TotalHours );
			else if ( Delay.TotalHours < 24                      )
				SubTitle = string.Format ( "il y a {0} heures" , (int)Delay.TotalHours );
			else if ( Delay.TotalDays == 1                      )
				SubTitle = string.Format ( "il y a {0} jour"   , (int)Delay.TotalDays  );
			else
				SubTitle = string.Format ( "il y a {0} jours"  , (int)Delay.TotalDays  );

			if ( ! string.IsNullOrEmpty ( Author ) )
				SubTitle = string.Format ( "Par {0}, {1}", Author, SubTitle );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Content += string.Format ( A_ItemHtml, "title" , Title    );
			Content += string.Format ( A_ItemHtml, "author", SubTitle );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Page = Pages.First;

			while ( Page != null )
				{
				string StoryBody = Page.Value<string>( "story_body" );

				StoryBody = FixContent ( StoryBody, A_LinkHtml, A_ImagHtml );

				StoryBody = Surrogate.Encode ( StoryBody );
					
				Content += string.Format ( A_ItemHtml, "paragraphe", StoryBody );

				Page = Page.Next;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Content = string.Format ( A_PageHtml, LongArticleUri, Title, Content );

			Article.Content = Content;

			return Cache.Save ( ArticleToFile ( Article ), Article.PublishDate, Content );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel asynchrone à la procédure <b>GetArticle</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void AsyncGetArticle ( RestEventHandler OnComplete, bool AllowCache, Article Article, 
				                                                                            AppCacheFile CacheFile )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// L'article est il enregistré ?
			//-------------------------------------------------------------------------------------------------------------------
			Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );

			if ( Article.IsMarked && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Bookmarks = AppBookmarks.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					Article Bookmark = Bookmarks.Get<Article> ( Article.ArticleID );

					if ( Bookmark != null && ! string.IsNullOrEmpty ( Bookmark.Content ) )
						{
						Article.CopyFrom ( Bookmark );

						OnComplete ( null, new RestEventArgs ( Article, InsertSheets ( Bookmark.Content ) ) );

						return;
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			string Path = "story/?fulltext=1&id=" + Article.ArticleID;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Exécution
			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( Article, Path, 20, CacheFile, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );

					AppCacheFile NewEntry = ParseGetArticle ( Article, Cache, State );

					if ( NewEntry.IsEmpty )
						{
						State.PostAnomaly ( RestRequestResult.NotFound );
						}
					else
						{
						RegisterArticle ( Article );

						State.PostOperationComplete ( InsertSheets ( NewEntry.Content, false ) );
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetArticle</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetArticle ( RestEventHandler OnComplete, bool AllowCache, Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry    = AppCacheFile.Empty;
			string       FileName = ArticleToFile ( Article );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( FileName, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				Article.Load ( ExtractMeta ( Entry.Content, "article" ) );

				Article.Content  = Entry.Content;
				Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				RegisterArticle ( Article );

				OnComplete ( null, new RestEventArgs ( Article, InsertSheets ( Entry.Content ) ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetArticle ( OnComplete, AllowCache, Article, Entry ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetBookmarks
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>RegisterApp</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetBookmarks ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
			string DateHtml = SR.GetResource ( "GetArticlesList", "Date.html" );
			string SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			string ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );

			string   Content     = string.Empty;
			DateTime CurrentDate = DateTime.MinValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			using ( var Bookmarks = AppBookmarks.GetForApplication () )
				{
				//---------------------------------------------------------------------------------------------------------------
				var Items = Bookmarks.GetEnumerator<Article> ();
				
				foreach ( var Item in Items.Keys )
					{
					//-----------------------------------------------------------------------------------------------------------
					DateTime BookmarkDate = Items[Item];
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Séparateur
					//-----------------------------------------------------------------------------------------------------------
					if ( CurrentDate.Date != BookmarkDate.Date )
						{
						//-------------------------------------------------------------------------------------------------------
						CurrentDate = BookmarkDate.Date;

						Content += string.Format ( DateHtml, WebUtility.HtmlEncode ( 
									    CurrentDate.ToString ( "dddd dd MMMM" ).ToTitleCase () ) );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else { Content += SepaHtml; }
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					string Title           = Surrogate.Encode ( Item.Title  );
					string Author          = Surrogate.Encode ( Item.Author );

					string LongArticleUri  = Item.UrlEncode ( "ArticleID"  , "Icon"       , 
														      "PublishDate", "Title"      , 
														      "Uri"                       );
					string ShortArticleUri = Item.UrlEncode ( "ArticleID"  , "PublishDate",
														      "Uri"                       );

					string SubTitle = string.Format ( "le {0} &#192; {1}", 
						                           Item.PublishDate.ToString ( "dd-MM-yyyy" ), 
						                           Item.PublishDate.ToString ( "H\\h"       ) );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					Content += string.Format ( ItemHtml, LongArticleUri ,
														 ShortArticleUri, 
														 Item.Icon      , 
														 Item.ArticleID , 
														 Title          , 
														 SubTitle       );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = SR.GetResource ( "GetArticlesList", "404.html" );

				Content = InsertSheets ( string.Format ( Content, "Cette section est vide." ) );

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = InsertSheets ( string.Format ( PageHtml, AppTitle, Content, string.Empty ) );

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GLOBAL => Procédure ExtractArticles
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>ExtractArticles</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ExtractArticles ( AppWebCache Cache, DownloadBitsState State, ref DateTime CurrentDate )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( State == null || State.Document == null || ! State.Document.HasValues )
				return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			var Result = State.Document["result"];
			
			if ( Result == null || ! Result.HasValues ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			JToken Items = null;

			if ( Result.Type == JTokenType.Array ) Items = Result;
			else                                   Items = Result["items"];
			
			if ( Items == null || ! Items.HasValues ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string H_DateHtml = SR.GetResource ( "GetArticlesList", "Date.html" );
			string H_SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			string H_ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string A_PageHtml = SR.GetResource ( "GetArticle"     , "Page.html" );
			string A_ItemHtml = SR.GetResource ( "GetArticle"     , "Item.html" );
			string A_LinkHtml = SR.GetResource ( "GetArticle"     , "Link.html" );
			string A_ImagHtml = SR.GetResource ( "GetArticle"     , "Imag.html" );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Content = string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Item = Items.First;

			while ( Item != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				var Pages = Item["pages"];

				if ( Pages == null || ! Pages.HasValues ) { Item = Item.Next; continue; }

				Article Article = Article.Parse ( Item );

				string Title  = Surrogate.Encode ( Article.Title  );
				string Author = Surrogate.Encode ( Article.Author );

				if ( string.IsNullOrEmpty ( Title ) ) { Item = Item.Next; continue; }

				string LongArticleUri  = Article.UrlEncode ( "ArticleID"  , "Icon"       , 
                                                             "PublishDate", "Title"      , 
														     "Uri"                       );
				string ShortArticleUri = Article.UrlEncode ( "ArticleID"  , "PublishDate",
				                                             "Uri"                       );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Partie Liste
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( CurrentDate.Date != Article.PublishDate.Date )
					{
					if ( CurrentDate == DateTime.MinValue && 
					                                Article.PublishDate.Date == DateTime.Now.Date )
						{
						CurrentDate = Article.PublishDate.Date;

						Content += string.Format ( H_DateHtml, "Aujourd'hui" );
						}
					else
						{
						CurrentDate = Article.PublishDate.Date;

						Content += string.Format ( H_DateHtml, WebUtility.HtmlEncode ( 
						                CurrentDate.ToString ( "dddd dd MMMM" ).ToTitleCase () ) );
						}
					}
				else { Content += H_SepaHtml; }
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				string SubTitle = string.Empty;

				TimeSpan Delay = DateTime.Now.Subtract ( Article.PublishDate );

				if      ( Delay.TotalHours < 1 && Delay.Minutes == 1 )
					SubTitle = string.Format ( "il y a {0} minute" , (int)Delay.Minutes    );
				else if ( Delay.TotalHours < 1                       )
					SubTitle = string.Format ( "il y a {0} minutes", (int)Delay.Minutes    );
				else if ( Delay.TotalHours == 1                      )
					SubTitle = string.Format ( "il y a {0} heure"  , (int)Delay.TotalHours );
				else if ( Delay.TotalHours < 24                      )
					SubTitle = string.Format ( "il y a {0} heures" , (int)Delay.TotalHours );
				else if ( Delay.TotalDays == 1                      )
					SubTitle = string.Format ( "il y a {0} jour"   , (int)Delay.TotalDays  );
				else
					SubTitle = string.Format ( "il y a {0} jours"  , (int)Delay.TotalDays  );

				if ( ! string.IsNullOrEmpty ( Author ) )
					SubTitle = string.Format ( "Par {0}, {1}", Author, SubTitle );

				Content += string.Format ( H_ItemHtml, LongArticleUri   ,
				                                       ShortArticleUri  , 
													   Article.Icon     , 
				                                       Article.ArticleID, 
													   Title            , 
													   SubTitle         );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Partie Article
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				string ArticleContent = string.Empty;

				ArticleContent += string.Format ( A_ItemHtml, "title" , Title    );
				ArticleContent += string.Format ( A_ItemHtml, "author", SubTitle );

				var Page = Pages.First;

				while ( Page != null )
					{
					string StoryBody = Page.Value<string>( "story_body" );

					StoryBody = FixContent ( StoryBody, A_LinkHtml, A_ImagHtml );

					StoryBody = Surrogate.Encode ( StoryBody );

					ArticleContent += string.Format ( A_ItemHtml, "paragraphe", StoryBody );

					Page = Page.Next;
					}

				ArticleContent = string.Format ( A_PageHtml, LongArticleUri, Title, 
				                                                                  ArticleContent );
				
				Cache.Save ( ArticleToFile ( Article ), Article.PublishDate, ArticleContent );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Item = Item.Next;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetArticlesList
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetArticlesList</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void ParseGetArticlesList ( AppWebCache Cache, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DateTime LastPublishDate = DateTime.MinValue;
			
			string Content = ExtractArticles ( Cache, State, ref LastPublishDate );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Tout est ok et récent
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
				string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );

				PrevHtml = string.Format ( PrevHtml, string.Empty );

				Cache.Save ( "HOME.PART", Content );

				Content = string.Format ( PageHtml, AppTitle, Content, PrevHtml );

				AppCacheFile NewEntry = Cache.Save ( "HOME.HTML", Content );

				State.PostOperationComplete ( InsertSheets ( Content, true ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On a rien à afficher :(
			//-------------------------------------------------------------------------------------------------------------------
			else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetArticlesList</b>.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de la demande.</param>
		/// <param name="AllowCache">Indique si on peut utiliser le cache.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetArticlesList ( RestEventHandler OnComplete, bool AllowCache )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = DateTime.Now.AddMinutes ( -15 );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( "HOME.HTML", ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Content = InsertSheets ( Entry.Content, true );

				OnComplete ( null, new RestEventArgs ( SectionType.All, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				string Path = string.Format ( "latest-stories/?skip=0&limit={0}", HomeSize );
				
				DownloadBits ( SectionType.All, Path, 20, Entry, null, OnComplete, ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( var Cache = AppWebCache.GetForApplication () )
						{
						//-------------------------------------------------------------------------------------------------------
						ParseGetArticlesList ( Cache, State );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetPreviousArticlesList
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetPreviousArticlesList</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetPreviousArticlesList ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			int          LoaddedArticles = 0;
			AppCacheFile Entry           = AppCacheFile.Empty;
			DateTime     LastPublishDate = DateTime.Now.AddHours ( -4 );

			if ( AppWebCache.Find ( "HOME.PART", DateTime.MinValue, out Entry ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( StringReader Sr = new StringReader ( Entry.Content ) )
					{
					string Line  = string.Empty;

					while ( ( Line = Sr.ReadLine () ) != null )
						{
						if ( Line.StartsWith ( "<!--" ) )
							{
							var Item = Article.Parse ( Line.Substring ( 4, Line.Length - 7 ).Trim () );

							if ( Item != null )
								{
								LoaddedArticles ++;

								LastPublishDate = Item.PublishDate;
								}
							}
						}
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Path = string.Format ( "latest-stories/?skip={0}&limit={1}", LoaddedArticles, HomeSize );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( SectionType.All, Path, 20, null, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				string AddedContent = string.Empty;
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					AddedContent = ExtractArticles ( Cache, State, ref LastPublishDate );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ! string.IsNullOrEmpty ( AddedContent ) )
						{
						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la partie PART
						//-------------------------------------------------------------------------------------------------------
						string Content = Entry.Content + AddedContent;

						Cache.Save ( "HOME.PART", Content );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la page complète
						//-------------------------------------------------------------------------------------------------------
						string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
						string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );

						PrevHtml = string.Format ( PrevHtml, string.Empty );

						Cache.Save ( "HOME.HTML", string.Format ( PageHtml , AppTitle , 
																			 Content  , 
																			 PrevHtml ) );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				State.PostOperationComplete ( AddedContent );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure SearchArticles
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>SearchArticles</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void ParseSearchArticles ( string Pattern, AppWebCache Cache, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DateTime LastPublishDate = DateTime.MinValue;
			
			string Content = ExtractArticles ( Cache, State, ref LastPublishDate );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Tout est ok et récent
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
				string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );

				PrevHtml = string.Format ( PrevHtml, HttpUtility.UrlEncode ( Pattern ) );

				Cache.Save ( PatternToPart ( Pattern ), Content );

				Content = string.Format ( PageHtml, AppTitle, Content, PrevHtml );

				AppCacheFile NewEntry = Cache.Save ( PatternToFile ( Pattern ), Content );

				State.PostOperationComplete ( InsertSheets ( Content, true ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On a rien à afficher :(
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = SR.GetResource ( "GetArticlesList", "404.html" );
				
				Content = InsertSheets ( string.Format ( Content, "Aucun r&#233;sultat." ) );

				State.PostOperationComplete ( Content );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>SearchArticles</b>.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de la demande.</param>
		/// <param name="AllowCache">Indique si on peut utiliser le cache.</param>
		/// <param name="Pattern">Texte de recherche</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void SearchArticles ( RestEventHandler OnComplete, bool AllowCache, string Pattern )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = DateTime.Now.AddMinutes ( -15 );
			string       Filename   = PatternToFile ( Pattern );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( Filename, ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Content = InsertSheets ( Entry.Content, true );

				OnComplete ( null, new RestEventArgs ( Pattern, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				string Path = string.Format ( "search/?query={0}&skip=0&limit={1}", 
				                                           HttpUtility.UrlEncode ( Pattern ), 20 );
				
				DownloadBits ( Pattern, Path, 20, Entry, null, OnComplete, ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( var Cache = AppWebCache.GetForApplication () )
						{
						//-------------------------------------------------------------------------------------------------------
						ParseSearchArticles ( Pattern, Cache, State );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure SearchPreviousArticles
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetPreviousArticlesList</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void SearchPreviousArticles ( RestEventHandler OnComplete, string Pattern )
			{
			//-------------------------------------------------------------------------------------------------------------------
			int          LoaddedArticles = 0;
			AppCacheFile Entry           = AppCacheFile.Empty;
			DateTime     LastPublishDate = DateTime.Now.AddHours ( -4 );
			string       Filename        = PatternToFile ( Pattern );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( Filename, DateTime.MinValue, out Entry ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( StringReader Sr = new StringReader ( Entry.Content ) )
					{
					string Line  = string.Empty;

					while ( ( Line = Sr.ReadLine () ) != null )
						{
						if ( Line.StartsWith ( "<!--" ) )
							{
							var Item = Article.Parse ( Line.Substring ( 4, Line.Length - 7 ).Trim () );

							if ( Item != null )
								{
								LoaddedArticles ++;

								LastPublishDate = Item.PublishDate;
								}
							}
						}
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Path = string.Format ( "search/?query={0}&skip={1}&limit={2}", 
			                              HttpUtility.UrlEncode ( Pattern ), LoaddedArticles, 20 );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( Pattern, Path, 20, null, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				string AddedContent = string.Empty;
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					AddedContent = ExtractArticles ( Cache, State, ref LastPublishDate );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ! string.IsNullOrEmpty ( AddedContent ) )
						{
						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la partie PART
						//-------------------------------------------------------------------------------------------------------
						string Content = Entry.Content + AddedContent;

						Cache.Save ( PatternToPart ( Pattern ), Content );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la page complète
						//-------------------------------------------------------------------------------------------------------
						string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
						string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );

						PrevHtml = string.Format ( PrevHtml, HttpUtility.UrlEncode ( Pattern ) );

						Cache.Save ( PatternToFile ( Pattern ), string.Format ( PageHtml , 
						                                                        AppTitle , 
						                                                        Content  , 
						                                                        PrevHtml ) );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				State.PostOperationComplete ( AddedContent );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // >> HomeSize
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Taille de l'accueil.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static int HomeSize
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				return ( NetworkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 ) ? 40 : 20;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> UseCompression
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Indique s'il faut compresser les échanges.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool UseCompression
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "use-compression", true  ); }
			set {        StorageSettings.SetValue ( "use-compression", value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "ZDNet.Service"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
